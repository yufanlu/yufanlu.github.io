<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yufan Lu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yufanlu.net/"/>
  <updated>2018-09-03T23:53:19.778Z</updated>
  <id>http://yufanlu.net/</id>
  
  <author>
    <name>Yufan Lu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Setup Neovim as Python IDE</title>
    <link href="http://yufanlu.net/2018/09/03/neovim-python/"/>
    <id>http://yufanlu.net/2018/09/03/neovim-python/</id>
    <published>2018-09-03T04:00:00.000Z</published>
    <updated>2018-09-03T23:53:19.778Z</updated>
    
    <content type="html"><![CDATA[<p>This will be a quick guide on how to setup neovim as your python IDE. It might invovle some concepts, but they shouldn’t block your setup as long as you follow these steps (hopefully).</p><p>Here are the tools/software that we need:</p><ul><li>neovim</li><li>python3</li><li>git</li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>You can install neovim according to the offical document <a href="https://github.com/neovim/neovim/wiki/Installing-Neovim" target="_blank" rel="noopener">here</a>. If you are using windows, you can always use the <a href="https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-download" target="_blank" rel="noopener">pre-built latest stable</a> release provided by the neovim team.</p><p>I am using neovim v0.3.1 at the time of writing showing as following:</p><img src="/2018/09/03/neovim-python/neovim.png"><a id="more"></a><h2 id="Python3-and-Neovim-package"><a href="#Python3-and-Neovim-package" class="headerlink" title="Python3 and Neovim package"></a>Python3 and Neovim package</h2><p>You need to have python3 installed and also install <code>neovim</code> package using <code>pip</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install neovim</div></pre></td></tr></table></figure><p>and then we can check if we have successfully configured python component for neovim by running the following command<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:echo has(&apos;python3&apos;)</div></pre></td></tr></table></figure></p><p>and check if it outputs <code>1</code> like the following,</p><img src="/2018/09/03/neovim-python/check-py3.gif"><h2 id="Plugin-Manager"><a href="#Plugin-Manager" class="headerlink" title="Plugin Manager"></a>Plugin Manager</h2><p>There are many neovim/vim plugin managers like <a href="https://github.com/Shougo/dein.vim" target="_blank" rel="noopener">dein.vim</a> and <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a>. Here I am showing vim-plug in the below figures. If you are using windows and don’t have PowerShell, then you can <a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener">download the plug.vim</a> (as suggested by the <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug document</a>) and put it at </p><blockquote><p><code>~\AppData\Local\nvim\autoload</code></p></blockquote><h2 id="Configuration-file"><a href="#Configuration-file" class="headerlink" title="Configuration file"></a>Configuration file</h2><p>Create the following configuration file based on the system you use:</p><ul><li>Unix: <code>~/.config/nvim/init.vim</code></li><li>Windows: <code>~\AppData\Local\nvim\init.vim</code></li></ul><p>this file will store all of our configurations about neovim such as:</p><ul><li>UI related settings</li><li>certain behaviors you want neovim to behave</li><li>plugins and related settings</li></ul><p>Create the <code>init.vim</code> file in the above location if it’s not there yet.</p><h2 id="Plugin-Manager-1"><a href="#Plugin-Manager-1" class="headerlink" title="Plugin Manager"></a>Plugin Manager</h2><p>There are many neovim/vim plugin managers like <a href="https://github.com/Shougo/dein.vim" target="_blank" rel="noopener">dein.vim</a> and <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a>. Here I am showing vim-plug in the below figures. If you are using windows and don’t have PowerShell, then you can <a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" target="_blank" rel="noopener">download the plug.vim</a> (as suggested by the <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug document</a>) and put it at </p><blockquote><p><code>~\AppData\Local\nvim\autoload</code></p></blockquote><p>After we created the <code>init.vim</code> file, paste the following contents in it</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">'win32'</span>) || <span class="built_in">has</span>(<span class="string">'win64'</span>)</div><div class="line">  <span class="keyword">let</span> <span class="variable">g:plugged_home</span> = <span class="string">'~/AppData/Local/nvim/plugged'</span></div><div class="line"><span class="keyword">else</span></div><div class="line">  <span class="keyword">let</span> <span class="variable">g:plugged_home</span> = <span class="string">'~/.vim/plugged'</span></div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="comment">" Plugins</span></div><div class="line"><span class="keyword">call</span> plug#begin(<span class="variable">g:plugged_home</span>)</div><div class="line"></div><div class="line">  <span class="comment">" UI related</span></div><div class="line">  Plug <span class="string">'chriskempson/base16-vim'</span></div><div class="line">  Plug <span class="string">'vim-airline/vim-airline'</span></div><div class="line">  Plug <span class="string">'vim-airline/vim-airline-themes'</span></div><div class="line"></div><div class="line">  <span class="comment">" Better Visual Guide</span></div><div class="line">  Plug <span class="string">'Yggdroot/indentLine'</span></div><div class="line"></div><div class="line">  <span class="comment">" syntax check</span></div><div class="line">  Plug <span class="string">'w0rp/ale'</span></div><div class="line"></div><div class="line">  <span class="comment">" Autocomplete</span></div><div class="line">  Plug <span class="string">'ncm2/ncm2'</span></div><div class="line">  Plug <span class="string">'roxma/nvim-yarp'</span></div><div class="line"></div><div class="line">  Plug <span class="string">'ncm2/ncm2-bufword'</span></div><div class="line">  Plug <span class="string">'ncm2/ncm2-path'</span></div><div class="line">  Plug <span class="string">'ncm2/ncm2-jedi'</span></div><div class="line"></div><div class="line">  <span class="comment">" Formater</span></div><div class="line">  Plug <span class="string">'Chiel92/vim-autoformat'</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> plug#end()</div><div class="line"></div><div class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span></div></pre></td></tr></table></figure><p>Then, close your neovim and reopen it, now neovim will load the setting above. And then we run the following command, neovim will install the plugins we put into <code>init.vim</code> above</p><blockquote><p><code>:PlugInstall</code></p></blockquote><img src="/2018/09/03/neovim-python/plugInstall.gif"><p>After this, we paste the following content into our configuration file below the content showing above.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="comment">" UI configuration</span></div><div class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></div><div class="line"><span class="keyword">syntax</span> enable</div><div class="line"></div><div class="line"><span class="comment">" colorscheme</span></div><div class="line"><span class="keyword">let</span> base16colorspace=<span class="number">256</span></div><div class="line"><span class="keyword">colorscheme</span> base16-gruvbox-dark-hard</div><div class="line"><span class="keyword">set</span> background=dark</div><div class="line"></div><div class="line"><span class="comment">" True Color Support if it's avaiable in terminal</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"termguicolors"</span>)</div><div class="line">    <span class="keyword">set</span> termguicolors</div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">"gui_running"</span>)</div><div class="line">  <span class="keyword">set</span> guicursor=n-v-<span class="keyword">c</span>-<span class="keyword">sm</span>:block,i-ci-<span class="keyword">ve</span>:block,r-<span class="keyword">cr</span>-<span class="keyword">o</span>:blocks</div><div class="line"><span class="keyword">endif</span></div><div class="line"></div><div class="line"><span class="keyword">set</span> <span class="keyword">number</span></div><div class="line"><span class="keyword">set</span> relativenumber</div><div class="line"></div><div class="line"><span class="keyword">set</span> hidden</div><div class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></div><div class="line"><span class="keyword">set</span> noshowmode</div><div class="line"><span class="keyword">set</span> noshowmatch</div><div class="line"><span class="keyword">set</span> nolazyredraw</div><div class="line"></div><div class="line"><span class="comment">" Turn off backup</span></div><div class="line"><span class="keyword">set</span> nobackup</div><div class="line"><span class="keyword">set</span> noswapfile</div><div class="line"><span class="keyword">set</span> nowritebackup</div><div class="line"></div><div class="line"><span class="comment">" Search configuration</span></div><div class="line"><span class="keyword">set</span> ignorecase                    <span class="comment">" ignore case when searching</span></div><div class="line"><span class="keyword">set</span> smartcase                     <span class="comment">" turn on smartcase</span></div><div class="line"></div><div class="line"><span class="comment">" Tab and Indent configuration</span></div><div class="line"><span class="keyword">set</span> expandtab</div><div class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></div><div class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span></div><div class="line"></div><div class="line"><span class="comment">" vim-autoformat</span></div><div class="line"><span class="keyword">noremap</span> <span class="symbol">&lt;F3&gt;</span> :Autoformat<span class="symbol">&lt;CR&gt;</span></div><div class="line"></div><div class="line"><span class="comment">" NCM2</span></div><div class="line"> <span class="keyword">augroup</span> NCM2</div><div class="line">  autocmd!</div><div class="line">  <span class="comment">" enable ncm2 for all buffers</span></div><div class="line">  <span class="keyword">autocmd</span> BufEnter * <span class="keyword">call</span> ncm2#enable_for_buffer()</div><div class="line"></div><div class="line">  <span class="comment">" :help Ncm2PopupOpen for more information</span></div><div class="line">  <span class="keyword">set</span> completeopt=noinsert,menuone,noselect</div><div class="line"></div><div class="line">  <span class="comment">" When the &lt;Enter&gt; key is pressed while the popup menu is visible, it only</span></div><div class="line">  <span class="comment">" hides the menu. Use this mapping to close the menu and also start a new line.</span></div><div class="line"> <span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;CR&gt;</span> (<span class="built_in">pumvisible</span>() ? <span class="string">"\&lt;c-y&gt;\&lt;cr&gt;"</span> : <span class="string">"\&lt;CR&gt;"</span>)</div><div class="line"><span class="keyword">augroup</span> END</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">" Ale</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_lint_on_enter</span> = <span class="number">0</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_lint_on_text_changed</span> = <span class="string">'never'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_echo_msg_error_str</span> = <span class="string">'E'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_echo_msg_warning_str</span> = <span class="string">'W'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_echo_msg_format</span> = <span class="string">'[%linter%] %s [%severity%]'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ale_linters</span> = &#123;<span class="string">'python'</span>: [<span class="string">'flake8'</span>]&#125;</div><div class="line"></div><div class="line"><span class="comment">" Airline</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline_left_sep</span>  = <span class="string">''</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline_right_sep</span> = <span class="string">''</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#ale#enabled = <span class="number">1</span></div><div class="line"><span class="keyword">let</span> airline#extensions#ale#error_symbol = <span class="string">'E:'</span></div><div class="line"><span class="keyword">let</span> airline#extensions#ale#warning_symbol = <span class="string">'W:'</span></div></pre></td></tr></table></figure><p>Close neovim and reopen it again, then we have this</p><img src="/2018/09/03/neovim-python/new-neovim.png"><h1 id="Python-autocompletion-and-code-lint-formatting"><a href="#Python-autocompletion-and-code-lint-formatting" class="headerlink" title="Python autocompletion and code lint/formatting"></a>Python autocompletion and code lint/formatting</h1><p>In order to have code completion, syntax checking, and code formatting, we need the following python packages</p><ul><li><code>jedi</code> for code completion: <code>pip install jedi</code></li><li><code>flake8</code> for code linting: <code>pip install flake8</code></li><li><code>autopep8</code> for code formatting: <code>pip install autopep8</code></li></ul><p>Then, we have our python coding environment in our neovim. Suppose we have the following python code,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> normal</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">simple_function</span><span class="params">(a, b, c=<span class="number">0</span>)</span>:</span></div><div class="line">    d = a + b</div><div class="line">    print(a + b + c)</div></pre></td></tr></table></figure><p>And neovim will display the following two errors/warnings:</p><img src="/2018/09/03/neovim-python/error-1.png"><img src="/2018/09/03/neovim-python/error-2.png"><p>So let’s fix them… note that we also have the autocompletion too!</p><img src="/2018/09/03/neovim-python/fix-1.gif"><p>Notice that we have another error/warning showing stating that</p><blockquote><p>E231: missing whitespace after ‘,’</p></blockquote><p>Now if we run the following command</p><blockquote><p><code>:Autoformat</code> or hit <code>&lt;F3&gt;</code> since we mapped it in our configuration file</p></blockquote><p>we will notice that the error E231 is resolved after code reformatting.s</p><img src="/2018/09/03/neovim-python/fix-2.gif"><p>since code linting and formatting rely on separate python uilities (<code>flake8</code> and <code>autopep8</code>), which are isolated from our editor. So we can set the behavior of them such as</p><ul><li><a href="http://flake8.pycqa.org/en/latest/user/configuration.html" target="_blank" rel="noopener">configure flake8</a> or <a href="https://pep8.readthedocs.io/en/release-1.7.x/intro.html#configuration" target="_blank" rel="noopener">configure autopep8</a> on<ul><li>max line length (say 100 instead of default value 79)</li><li>ignore particular warnings or errors</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This will be a quick guide on how to setup neovim as your python IDE. It might invovle some concepts, but they shouldn’t block your setup as long as you follow these steps (hopefully).&lt;/p&gt;
&lt;p&gt;Here are the tools/software that we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;neovim&lt;/li&gt;
&lt;li&gt;python3&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Install&quot;&gt;&lt;a href=&quot;#Install&quot; class=&quot;headerlink&quot; title=&quot;Install&quot;&gt;&lt;/a&gt;Install&lt;/h2&gt;&lt;p&gt;You can install neovim according to the offical document &lt;a href=&quot;https://github.com/neovim/neovim/wiki/Installing-Neovim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. If you are using windows, you can always use the &lt;a href=&quot;https://github.com/neovim/neovim/wiki/Installing-Neovim#install-from-download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pre-built latest stable&lt;/a&gt; release provided by the neovim team.&lt;/p&gt;
&lt;p&gt;I am using neovim v0.3.1 at the time of writing showing as following:&lt;/p&gt;
&lt;img src=&quot;/2018/09/03/neovim-python/neovim.png&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Productivity Booster: Ultisnips</title>
    <link href="http://yufanlu.net/2016/10/30/ultisnips/"/>
    <id>http://yufanlu.net/2016/10/30/ultisnips/</id>
    <published>2016-10-30T15:43:00.000Z</published>
    <updated>2017-08-09T20:20:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">UltiSnips</a> is a really powerful vim plugin that boosts your productivity by saving you from typing redundant code patterns or repeated configurations. And <a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">UltiSnips</a> provides an easy way to create and use snippets:</p><ol><li>Snippets are organized by file type: <code>cpp.snippets</code> for <code>c++</code> and <code>pandoc.snippets</code> for <code>pandoc</code>.</li><li>Any changes made to snippets will take effect after you save them. So you can create and edit snippets on the fly.</li></ol><p>For example, writing the following <code>c++</code> code can be really easy (and quick):</p><img src="/2016/10/30/ultisnips/demo1.gif"><p>And You will notice a huge difference when you turn off this plugin once you get used to it. There are lots of awesome snippet plugins, such as <a href="https://github.com/Shougo/neosnippet.vim" target="_blank" rel="noopener">neosnippet</a>.</p><a id="more"></a><p><a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">UltiSnips</a> is more like a snippet engine while you actually need a separate plugin for your “snippet collection”. And <a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">offical document</a> of <a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener">UltiSnips</a> uses <a href="https://github.com/honza/vim-snippets" target="_blank" rel="noopener">vim-snippets</a> as the “collection plugin”.</p><h2 id="Installation-of-UltiSnips-and-vim-snippets"><a href="#Installation-of-UltiSnips-and-vim-snippets" class="headerlink" title="Installation of UltiSnips and vim-snippets"></a>Installation of UltiSnips and vim-snippets</h2><p>If you use <a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">vim-plug</a>, all you need to do is to provide the repo name for <code>UltiSnips</code> and <code>vim-snippets</code> in <code>vimrc</code> like the following. Reload vim and run <code>:PlugInstall</code>.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">" vim-plug</span></div><div class="line"><span class="keyword">call</span> plug#begin(<span class="string">'~/.vim/plugged'</span>)</div><div class="line"></div><div class="line">Plug <span class="string">'SirVer/ultisnips'</span></div><div class="line">Plug <span class="string">'honza/vim-snippets'</span></div><div class="line"></div><div class="line"><span class="keyword">call</span> plug#end()<span class="comment">"</span></div></pre></td></tr></table></figure><p>And here is a screenshot of snippets provided by <code>vim-snippets</code>:</p><img src="/2016/10/30/ultisnips/snips.png"><h2 id="UltiSnips-requirement-and-how-it-works"><a href="#UltiSnips-requirement-and-how-it-works" class="headerlink" title="UltiSnips requirement and how it works"></a>UltiSnips requirement and how it works</h2><p>In order to use <code>UltiSnips</code>, vim needs <code>python</code> or <code>python3</code> support, which can be checked by running</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">"python"</span>)   <span class="comment">" if you use python 2.7</span></div><div class="line">:<span class="keyword">echo</span> <span class="built_in">has</span>(<span class="string">"python3"</span>)  <span class="comment">" if you use python 3.3 or 3.4</span></div></pre></td></tr></table></figure><p>or you could check you vim version and find out if it has python support by running</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">version</span></div></pre></td></tr></table></figure><p>If you saw either <code>+python</code> or <code>+python3</code> in the output, you are good to go. My vim is compiled with python2 support, so I have <code>+python</code> and <code>-python3</code> in the screenshot.</p><img src="/2016/10/30/ultisnips/version.png"><p>When vim is started, <code>ultisnips</code> will search all folders named <strong>UltiSnips</strong> (by default) under path <code>$VIM</code> and find the corresponding snippet file given the file type you have opened. And the snippets used in the example above are:</p><ul><li><code>incc</code>, which is expanded as <code>include &lt;iostream&gt;</code></li><li><code>main</code>, which is expanded as <code>int main(...){ ... }</code></li><li><code>cout</code>, which is expanded as <code>cout &lt;&lt; ... &lt;&lt; endl;</code></li></ul><p>UltiSnips will expand the keywords for you automatically or by a trigger key. Within each snippet, you can define a jump sequence to move cursor around and edit related content.</p><h2 id="Expand-a-snippet"><a href="#Expand-a-snippet" class="headerlink" title="Expand a snippet"></a>Expand a snippet</h2><p>The default key to expand a snippet is <code>&lt;tab&gt;</code>. For example, after we enter <strong>main</strong> and hit <code>&lt;tab&gt;</code>, the word <strong>main</strong> will be replaced with a predefined snippet:</p><img src="/2016/10/30/ultisnips/main.gif"><p>and you can use a different key to expand a snippet by changing <code>g:UltiSnipsExpandTrigger</code> in your <code>vimrc</code>.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsExpandTrigger</span> = [the key you like]</div></pre></td></tr></table></figure><h2 id="Create-a-simple-snippet"><a href="#Create-a-simple-snippet" class="headerlink" title="Create a simple snippet"></a>Create a simple snippet</h2><p>A simple way to do this is to create a folder named <strong>UltiSnips</strong> under path <code>$VIM</code> to collect your customized snippets. Or you can put the folder anywhere you want and then create a link under <code>$vim</code>. Just for fun, let’s create a file named <code>cpp.snippets</code> and put the following snippet in it:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">snippet <span class="built_in">std</span> <span class="string">"use namespace std"</span> b</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>And UltiSnips will capture any changes you made when you save the snippet so there is no need to restart your vim.<br><img src="/2016/10/30/ultisnips/std.gif"></p><p>A snippet is created with the following structure:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">snippet keyword &quot;description&quot; option</div><div class="line">content</div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>In the snippet we just created, <code>std</code> is the <strong>keyword</strong>, and <code>&quot;use namespace std&quot;</code> is the <strong>description</strong> (which will be shown if you use autocomplete plugins like <a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener">YouCompleteMe</a>, <a href="https://github.com/Shougo/neocomplete.vim" target="_blank" rel="noopener">neocomplete</a>, or <a href="https://github.com/Shougo/deoplete.nvim" target="_blank" rel="noopener">deoplete</a>), and <code>b</code> is the <strong>option</strong> for the snippet:</p><ul><li><code>b</code> — snippet can only be expanded if it’s the beginning of the line</li><li><code>A</code> — snippet will be expanded automatically</li><li><code>w</code> — snippet can be expanded if it’s a “word” to vim (check <code>:help iskeyword</code>). For example, a <strong>word</strong> can be “a sequence of other non-blank characters” according to <code>:help word</code>.</li><li><code>i</code> — snippet can be expanded in the middle of a word.</li></ul><p>Other options such as <code>r</code>, <code>s</code>, <code>t</code>, <code>m</code> and their related description can be found by running:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">help</span> UltiSnips</div></pre></td></tr></table></figure><h2 id="Advanced-Sort-of-UltiSnips"><a href="#Advanced-Sort-of-UltiSnips" class="headerlink" title="Advanced (Sort of) UltiSnips"></a>Advanced (Sort of) UltiSnips</h2><p>Let’s write another <code>c++</code> snippet in <code>cpp.snippets</code> for class definition. Save it and enter a <code>c++</code> file. </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">snippet <span class="keyword">class</span> <span class="string">"class"</span> b</div><div class="line"><span class="keyword">class</span> $&#123;<span class="number">1</span>:Class&#125;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// constructors, asssignment, destructor</span></div><div class="line">    $<span class="number">1</span>();</div><div class="line">    $<span class="number">1</span>(<span class="keyword">const</span> $<span class="number">1</span>&amp;);</div><div class="line">    $<span class="number">1</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> $<span class="number">1</span>&amp;);</div><div class="line">    ~$<span class="number">1</span>();</div><div class="line"><span class="keyword">private</span>:</div><div class="line"></div><div class="line">&#125;;</div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>After we expand this snippet, let’s type <strong>BinaryTree</strong>. And we can see that all fields marked as <code>$1</code> are updated as we type.</p><img src="/2016/10/30/ultisnips/binarytree.gif"><p>In this snippet, <code>${1:Class}</code> is a placeholder marked as <code>$1</code> with default content <strong>Class</strong>. To define a jump sequence, we use dollar sign followed by numbers like <code>$1</code>, <code>$2</code>, <code>$3</code> …</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">snippet <span class="keyword">class</span> <span class="string">"class"</span> b</div><div class="line"><span class="keyword">class</span> $&#123;<span class="number">1</span>:Class&#125;&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">// constructors, asssignment, destructor</span></div><div class="line">    $<span class="number">1</span>();</div><div class="line">    $<span class="number">1</span>(<span class="keyword">const</span> $<span class="number">1</span>&amp;);</div><div class="line">    $<span class="number">1</span>&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> $<span class="number">1</span>&amp;);</div><div class="line">    ~$<span class="number">1</span>();</div><div class="line">    $<span class="number">2</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    $<span class="number">3</span></div><div class="line">&#125;;</div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>The default key to jump forward and backward is </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">&lt;c-j&gt;</span> <span class="comment">" jump forward</span></div><div class="line"><span class="symbol">&lt;c-k&gt;</span> <span class="comment">" jump backward</span></div></pre></td></tr></table></figure><p>After we update the snippet, expand <strong>class</strong>, and type <strong>BinaryTree</strong>, we can jump to the next two placeholders by pressing <code>&lt;c-j&gt;</code> (<code>ctrl + j</code>).</p><img src="/2016/10/30/ultisnips/jump.gif"><h2 id="Visual-Placeholder-in-UltiSnips"><a href="#Visual-Placeholder-in-UltiSnips" class="headerlink" title="Visual Placeholder in UltiSnips"></a>Visual Placeholder in UltiSnips</h2><p>Visual placeholder is another powerful feature. It further reduces the amount of typing by providing you a way to reuse the existing context in the buffer. Suppose we use the following snippet to define a function in <code>c++</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">snippet fun <span class="string">"function definition"</span> b</div><div class="line">$&#123;<span class="number">2</span>:<span class="keyword">void</span>&#125; $&#123;<span class="number">1</span>:name&#125;($<span class="number">3</span>)&#123;</div><div class="line">    $<span class="number">4</span></div><div class="line">&#125;</div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>Suppose we have the following line in the buffer and want to use the following content as the function body:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Vim Rocks!"</span> &lt;&lt; <span class="built_in">endl</span>;</div></pre></td></tr></table></figure><p>This could be done in two steps:</p><ol><li>expand the keyword <strong>fun</strong><img src="/2016/10/30/ultisnips/without_visual1.gif"></li><li>move the line and indent<img src="/2016/10/30/ultisnips/without_visual2.gif"></li></ol><p>Using the visual placeholder, this can be done in one step with a simple modification.<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">snippet fun <span class="string">"function def"</span> b</div><div class="line">$&#123;<span class="number">2</span>:<span class="keyword">void</span>&#125; $&#123;<span class="number">1</span>:name&#125;($<span class="number">3</span>)&#123;</div><div class="line">    $&#123;<span class="number">4</span>:$&#123;VISUAL&#125;&#125;      <span class="comment">// &lt;--- visual placeholder added</span></div><div class="line">&#125;</div><div class="line">endsnippet</div></pre></td></tr></table></figure></p><p>Any selected content under the visual mode will be put into the visual placeholder, <code>${VISUAL}</code> when the snippet is expanded. Thus, instead of moving the line and indent it, we could do</p><ol><li>select the line under visual mode and hit <code>&lt;TAB&gt;</code></li><li>expand the keyword <code>fun</code></li></ol><img src="/2016/10/30/ultisnips/with_visual.gif"><p>This feature is really helpful when you restructure you text a lot. For example, wrap a paragraph in environment such as <code>enumerate</code>, <code>itemize</code> when writing LaTex.</p><h2 id="Python-interpolation-in-UltiSnips"><a href="#Python-interpolation-in-UltiSnips" class="headerlink" title="Python interpolation in UltiSnips"></a>Python interpolation in UltiSnips</h2><p>UltiSnips also allows users to leverage python to accomplish complex tasks. Suppose we want to insert all files in the current directory, we can write a simple python function to do this. We the following function in <code>cpp.snippets</code>. Here, <code>!p</code> means <code>python</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">global</span> !p</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_files</span><span class="params">()</span>:</span></div><div class="line">    files = []</div><div class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</div><div class="line">        <span class="keyword">if</span> f.endswith((<span class="string">'.cpp'</span>, <span class="string">'.h'</span>, <span class="string">'.cc'</span>)) <span class="keyword">and</span> <span class="keyword">not</span> f.startswith(<span class="string">'.'</span>):</div><div class="line">            files.append(f)</div><div class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(files)</div><div class="line">endglobal</div></pre></td></tr></table></figure><p>Then, we could call this function when we write other snippets.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">snippet ls <span class="string">"list source files"</span> iw</div><div class="line">`!p snip.rv = list_files()`     <span class="comment">// snip.rv means "snip return value"</span></div><div class="line">endsnippet</div></pre></td></tr></table></figure><p>Suppose we have two files in the folder: <code>ultisnip.cpp</code> and <code>ultisnip.h</code>.</p><img src="/2016/10/30/ultisnips/python.gif"><p>And here is the <a href="http://vimzijun.net/2016/10/30/ultisnip/" target="_blank" rel="noopener">link</a> to the Chinese version of this post.</p><h3 id="Great-Tutorials-on-UltiSnips"><a href="#Great-Tutorials-on-UltiSnips" class="headerlink" title="Great Tutorials on UltiSnips"></a>Great Tutorials on UltiSnips</h3><ul><li><a href="https://github.com/SirVer/ultisnips#user-content-screencasts" target="_blank" rel="noopener">Screencasts</a> listed by the official document</li><li><a href="http://vimcasts.org/episodes/meet-ultisnips/" target="_blank" rel="noopener">Meet UltiSnips</a></li><li><a href="http://vimcasts.org/episodes/ultisnips-python-interpolation/" target="_blank" rel="noopener">Using Python interpolation in UltiSnips snippets</a></li><li><a href="http://vimcasts.org/episodes/ultisnips-visual-placeholder/" target="_blank" rel="noopener">Using selected text in UltiSnips snippets</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/SirVer/ultisnips&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UltiSnips&lt;/a&gt; is a really powerful vim plugin that boosts your productivity by saving you from typing redundant code patterns or repeated configurations. And &lt;a href=&quot;https://github.com/SirVer/ultisnips&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UltiSnips&lt;/a&gt; provides an easy way to create and use snippets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Snippets are organized by file type: &lt;code&gt;cpp.snippets&lt;/code&gt; for &lt;code&gt;c++&lt;/code&gt; and &lt;code&gt;pandoc.snippets&lt;/code&gt; for &lt;code&gt;pandoc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Any changes made to snippets will take effect after you save them. So you can create and edit snippets on the fly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For example, writing the following &lt;code&gt;c++&lt;/code&gt; code can be really easy (and quick):&lt;/p&gt;
&lt;img src=&quot;/2016/10/30/ultisnips/demo1.gif&quot;&gt;
&lt;p&gt;And You will notice a huge difference when you turn off this plugin once you get used to it. There are lots of awesome snippet plugins, such as &lt;a href=&quot;https://github.com/Shougo/neosnippet.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;neosnippet&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="http://yufanlu.net/categories/vim/"/>
    
    
      <category term="vim" scheme="http://yufanlu.net/tags/vim/"/>
    
      <category term="vimrc" scheme="http://yufanlu.net/tags/vimrc/"/>
    
      <category term="ultisnips" scheme="http://yufanlu.net/tags/ultisnips/"/>
    
  </entry>
  
  <entry>
    <title>Easy Vim Setup</title>
    <link href="http://yufanlu.net/2016/07/13/easy-vim-setup/"/>
    <id>http://yufanlu.net/2016/07/13/easy-vim-setup/</id>
    <published>2016-07-13T04:21:25.000Z</published>
    <updated>2018-02-10T18:58:07.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vim-Installation"><a href="#Vim-Installation" class="headerlink" title="Vim Installation"></a>Vim Installation</h3><p>Mac OS come with a vim, which might not be the latest version. Using <a href="http://brew.sh" target="_blank" rel="noopener">Homebrew</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, latest version of vim can be obtained by running</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install vim</div></pre></td></tr></table></figure><p>For Linux, for example, Ubuntu,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim</div></pre></td></tr></table></figure></p><p>For Windows, installers could be obtained at the <a href="http://www.vim.org/download.php" target="_blank" rel="noopener">offical website</a>. And one famous vim plugin <a href="https://github.com/Valloric/YouCompleteMe#windows" target="_blank" rel="noopener">YouCompleteMe</a> also provides a <a href="https://bintray.com/micbou/generic/vim" target="_blank" rel="noopener">vim build</a> with Lua, Perl, Python, Racket, Ruby support.</p><a id="more"></a><h3 id="vimtutor"><a href="#vimtutor" class="headerlink" title="vimtutor"></a>vimtutor</h3><img src="/2016/07/13/easy-vim-setup/vimtutor.png"><p>Shipped with vim, vimtutor is one of the most effective tutorials to vim. It covers many actions and commands that help beginners to become productive using vim. After installation of vim, one could enter vimtutor by running the following command in terminal (for windows, it can be  located at the vim installation folder):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vimtutor</div></pre></td></tr></table></figure><p>It may take 25 to 30 minutes for one to complete the tutorial. But it will definitely take more time to get used to the modal editing philosophy of vim. In my opinion, all editors are trying to solve one core issue:</p><blockquote><p>How to be (more) productive with a limited number of keys provided by a keyboard?</p></blockquote><p>One typical way to solve this is using <em>modifier keys</em> like <code>ctrl</code> and <code>alt</code>. A daily usage case is we use <code>ctrl + c</code> to copy and <code>ctrl + p</code> to paste. And some times one need to chain multiple key chords to archive certain task. For example, one need to press <code>ctrl + c</code> <code>ctrl + x</code> <code>ctrl + l</code> in <a href="http://orgmode.org" target="_blank" rel="noopener">org-mode</a> to preview LaTex math equations.</p><p>Instead of heavily relying on the modifier key, vim uses different modals to assign different “meanings” to the same key. For example,</p><ul><li>In <strong>insert mode</strong>, <code>d</code> and <code>w</code> will enter the character.</li><li>But in <strong>normal mode</strong>, <code>d</code> means “delete” and <code>w</code> actually moves the cursor to the “word”</li></ul><p>I am not saying the second approach (vim) is better than the first approach (emacs). They are just different “answers” to the issue above.</p><h3 id="Simple-Setups-for-a-Better-Look"><a href="#Simple-Setups-for-a-Better-Look" class="headerlink" title="Simple Setups for a Better Look"></a>Simple Setups for a Better Look</h3><p>After entering vim, one could type the following commands to:</p><ol><li><p>Show the line number</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">set</span> <span class="keyword">number</span></div></pre></td></tr></table></figure><img src="/2016/07/13/easy-vim-setup/set_nu.gif"></li><li><p>Use syntax highlighting</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">syntax</span> <span class="keyword">on</span></div></pre></td></tr></table></figure><img src="/2016/07/13/easy-vim-setup/syntax_on.gif"></li><li><p>Use relative line number</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">set</span> relativenumber</div></pre></td></tr></table></figure><img src="/2016/07/13/easy-vim-setup/set_rnu.gif"></li><li><p>Not compatible to vi</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:<span class="keyword">set</span> nocompatible</div></pre></td></tr></table></figure></li></ol><p>In most cases, we put configurations of vim in a file named <code>.vimrc</code> (<code>_vimrc</code> on Windows) and vim will execute commands in the configuration file when it starts. The file is located at</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Mac/Linux: ~/.vimrc</div><div class="line">Windows:   $HOME/_vimrc</div></pre></td></tr></table></figure><p>And we can put the following lines in the <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">set</span> nocompatible</div><div class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></div><div class="line"><span class="keyword">set</span> <span class="keyword">number</span></div><div class="line"><span class="keyword">set</span> relativenumber</div><div class="line"></div><div class="line"><span class="comment">" settings you can try</span></div><div class="line"><span class="keyword">set</span> wrap        <span class="comment">" wrap lines longer than the width of the window</span></div><div class="line"><span class="keyword">set</span> ruler       <span class="comment">" show line and column number of the cursor position</span></div></pre></td></tr></table></figure><p>With some practices and usage of some plugins, you can be really productive using vim. Happy Vimming!</p><img src="/2016/07/13/easy-vim-setup/vimtex_showcase.gif" title="vim + LaTex"><p>And here is the <a href="http://vimzijun.net/2016/07/13/vim-setup/" target="_blank" rel="noopener">link</a> to the Chinese version of this post.</p><h3 id="Some-Great-Vim-Tutorials"><a href="#Some-Great-Vim-Tutorials" class="headerlink" title="Some Great Vim Tutorials"></a>Some Great Vim Tutorials</h3><ul><li>vimtutor</li><li><a href="http://www.openvim.com" target="_blank" rel="noopener">Interactive Vim tutorial</a></li><li><a href="https://github.com/mhinz/vim-galore" target="_blank" rel="noopener">Vim Galore</a></li><li><a href="https://danielmiessler.com/study/vim" target="_blank" rel="noopener">A vim Tutorial and Primer</a></li><li><a href="https://benmccormick.org/learning-vim-in-2014/" target="_blank" rel="noopener">Learning Vim in 2014</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Homebrew is a package manager for macOS</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vim-Installation&quot;&gt;&lt;a href=&quot;#Vim-Installation&quot; class=&quot;headerlink&quot; title=&quot;Vim Installation&quot;&gt;&lt;/a&gt;Vim Installation&lt;/h3&gt;&lt;p&gt;Mac OS come with a vim, which might not be the latest version. Using &lt;a href=&quot;http://brew.sh&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homebrew&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, latest version of vim can be obtained by running&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;brew install vim&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For Linux, for example, Ubuntu,&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install vim&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For Windows, installers could be obtained at the &lt;a href=&quot;http://www.vim.org/download.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;offical website&lt;/a&gt;. And one famous vim plugin &lt;a href=&quot;https://github.com/Valloric/YouCompleteMe#windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YouCompleteMe&lt;/a&gt; also provides a &lt;a href=&quot;https://bintray.com/micbou/generic/vim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vim build&lt;/a&gt; with Lua, Perl, Python, Racket, Ruby support.&lt;/p&gt;
    
    </summary>
    
      <category term="vim" scheme="http://yufanlu.net/categories/vim/"/>
    
    
      <category term="vim" scheme="http://yufanlu.net/tags/vim/"/>
    
      <category term="vim-setup" scheme="http://yufanlu.net/tags/vim-setup/"/>
    
      <category term="vimrc" scheme="http://yufanlu.net/tags/vimrc/"/>
    
  </entry>
  
</feed>
